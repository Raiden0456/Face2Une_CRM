{
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "Face2Une Project",
      "description": "API",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
      {
        "name": "Face2Une",
        "description": "API for communicating with database"
      }
    ],
    "schemes": ["http", "https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/main_proc": {
          "get": {
            "tags": ["Procedures"],
            "summary": "Get all main procedures in db",
            "responses": {
              "200": {
                "description": "Returns all main procedures in database in JSON format"
              }
            }
          }
        },
        "/optional_proc": {
          "get": {
            "tags": ["Procedures"],
            "summary": "Get all optional procedures in db",
            "responses": {
              "200": {
                "description": "Returns all optional procedures in database in JSON format"
              }
            }
          }
        },
        "/proc/{procid}": {
          "get": {
            "tags": ["Procedures"],
            "summary": "Get a single procedure by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "procid",
              "description": "id of procedure",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single procedure in database in JSON format"
              }
            }
          }
        },
        "/create_proc": {
          "post": {
            "tags": ["Procedures"],
            "summary": "Create new procedure",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of procedure",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Procedure"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a procedure in database using JSON format"
              }
            }
          }
        },
        "/update_proc": {
          "post": {
            "tags": ["Procedures"],
            "summary": "Update procedure by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of procedure",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Procedure"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a procedure in database using JSON format"
              }
            }
          }
        },
        "/delete_proc/{procid}": {
          "delete": {
            "tags": ["Procedures"],
            "summary": "Delete procedure by id",
            "parameters": [
              {
              "in": "path",
              "name": "procid",
              "description": "id of procedure",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a procedure in database by id"
              }
            }
          }
        },
        "/proc_total": {
          "get": {
            "tags": ["Procedures"],
            "summary": "Get total cost of procedures in db by array of their ids",
            "parameters": [
              {
              "in": "query",
              "name": "proc_array",
              "description": "ids of procedures",
              "required": true,
              "type": "array",
              "items": {
                "type": "integer",
                "uniqueItems": false
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns total cost of all procedures in database as number"
              }
            }
          }
        },
        "/pack": {
          "get": {
            "tags": ["Packages"],
            "summary": "Get all packages in db",
            "responses": {
              "200": {
                "description": "Returns all packages in database in JSON format"
              }
            }
          }
        },
        "/pack/{packid}": {
          "get": {
            "tags": ["Packages"],
            "summary": "Get a single package by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "packid",
              "description": "id of package",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single package in database in JSON format"
              }
            }
          }
        },
        "/create_pack": {
          "post": {
            "tags": ["Packages"],
            "summary": "Create new package",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of package",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Package"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a package in database using JSON format"
              }
            }
          }
        },
        "/update_pack": {
          "post": {
            "tags": ["Packages"],
            "summary": "Update package by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of package",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Package"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a package in database using JSON format"
              }
            }
          }
        },
        "/delete_pack/{packid}": {
          "delete": {
            "tags": ["Packages"],
            "summary": "Delete package by id",
            "parameters": [
              {
              "in": "path",
              "name": "packid",
              "description": "id of package",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a package in database by id"
              }
            }
          }
        },
        "/buy_pack": {
          "post": {
            "tags": ["Packages"],
            "summary": "Buy packages",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "client id and array of package ids",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "packages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "package_id": {
                          "type": "integer"
                        },
                        "amount_bought": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Buy packages for a client in database using JSON format"
              }
            }
          }
        },
        "/cert": {
          "get": {
            "tags": ["Certificates"],
            "summary": "Get all certificates in db",
            "responses": {
              "200": {
                "description": "Returns all certificates in database in JSON format"
              }
            }
          }
        },
        "/cert/{certid}": {
          "get": {
            "tags": ["Certificates"],
            "summary": "Get a single certificate by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "certid",
              "description": "id of certificate",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single certificate in database in JSON format"
              }
            }
          }
        },
        "/create_cert": {
          "post": {
            "tags": ["Certificates"],
            "summary": "Create new certificate",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of certificate",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Certificate"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a certificate in database using JSON format"
              }
            }
          }
        },
        "/update_cert": {
          "post": {
            "tags": ["Certificates"],
            "summary": "Update certificate by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of certificate",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Certificate"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a certificate in database using JSON format"
              }
            }
          }
        },
        "/delete_cert/{certid}": {
          "delete": {
            "tags": ["Certificates"],
            "summary": "Delete certificate by id",
            "parameters": [
              {
              "in": "path",
              "name": "certid",
              "description": "id of certificate",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a certificate in database by id"
              }
            }
          }
        },
        "/buy_cert": {
          "post": {
            "tags": ["Certificates"],
            "summary": "Buy certificate",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "client id and certificate id",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "certificate_id": {
                    "type": "integer"
                  }
                }
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Buy certificate for a client in database using JSON format"
              }
            }
          }
        },
        "/sources":
        {
          "get": {
            "tags": ["Found us sources"],
            "summary": "Get all sources in db",
            "responses": {
              "200": {
                "description": "Returns all possible Found us sources in database in JSON format"
              }
            }
          }
        },
        "/sources/{sourceid}": {
          "get": {
            "tags": ["Found us sources"],
            "summary": "Get a single found us source by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "sourceid",
              "description": "id of source",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single found us source in database in JSON format"
              }
            }
          }
        },
        "/create_source": {
          "post": {
            "tags": ["Found us sources"],
            "summary": "Create new found us source",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of found us source",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Source"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a found us source in database using JSON format"
              }
            }
          }
        },
        "/update_source": {
          "post": {
            "tags": ["Found us sources"],
            "summary": "Update found us source by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of found us source",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Source"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a found us source in database using JSON format"
              }
            }
          }
        },
        "/delete_source/{sourceid}": {
          "delete": {
            "tags": ["Found us sources"],
            "summary": "Delete found us source by id",
            "parameters": [
              {
              "in": "path",
              "name": "sourceid",
              "description": "id of found us source",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a found us source in database by id"
              }
            }
          }
        },
        "/add_source_weight":
        {
          "post": {
            "tags": ["Found us sources"],
            "summary": "Add weight to found us source",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "id of found us source",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  }
                }
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Add weight to found us source in database"
              }
            }
          }
        },
        "/coupon": {
          "get": {
            "tags": ["Coupons"],
            "summary": "Get coupons in db",
            "parameters": [
              {
                "in": "query",
                "name": "index",
                "description": "starting index(starting from 1)",
                "required": false,
                "default": 1,
                "schema": {
                  "type": "number"
                }
                
              },
              {
                "in": "query",
                "name": "per_page",
                "description": "max coupons per page",
                "required": false,
                "default": 10,
                "schema": {
                  "type": "number"
                }
              },
              {
                "in": "query",
                "name": "filter_like",
                "description": "multifilter 'like' for all columns",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "column",
                "description": "'equal' filter column name(id, name, code))",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "value",
                "description": "value of 'equal' filter column",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns coupons in database in JSON format"
              }
            }
          }
        },
        "/coupon/{couponid}": {
          "get": {
            "tags": ["Coupons"],
            "summary": "Get a single coupon by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "couponid",
              "description": "coupon id",
              "required": true,
              "schema": {
                "type": "integer"
              }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns coupon in database in JSON format"
              }
            }
          }
        },
        "/create_coupon": {
          "post": {
            "tags": ["Coupons"],
            "summary": "Create new coupon",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of coupon",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Coupon"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a coupon in database using JSON format"
              }
            }
          }
        },
        "/update_coupon": {
          "post": {
            "tags": ["Coupons"],
            "summary": "Update coupon by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of coupon",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Coupon"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a coupon in database using JSON format"
              }
            }
          }
        },
        "/delete_coupon/{couponid}": {
          "delete": {
            "tags": ["Coupons"],
            "summary": "Delete coupon by id",
            "parameters": [
              {
              "in": "path",
              "name": "couponid",
              "description": "id of coupon",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a coupon in database by id"
              }
            }
          }
        },
        "/code_check": {
          "get": {
            "tags" : ["Codes"],
            "summary": "Check code validity and get data on it",
            "parameters": [
              {
                "in": "query",
                "name": "email",
                "description": "client email, used to determine if client has a package",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "code",
                "description": "code to check",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns code type and data in JSON format"
              }
            }
          } 
        },
        "/use_code": {
          "post":{
            "tags": ["Codes"],
            "summary": "Use code and modify database, NOTE: CAN NOT BE USED BEFORE VALIDITY IS CHEKED",
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "object of code params",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email":{ 
                      "type": "string"
                    },
                    "promocode": {
                      "type": "string"
                    },
                    "code_type": {
                      "type": "string"
                    },
                    "total_price": {
                      "type": "number"
                    }
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Uses codes, e.g modifies database"
              }
            }
          }
        },
        "/users": {
          "get": {
            "tags": ["Users"],
            "summary": "Get users in db",
            "parameters": [
              {
                "in": "query",
                "name": "index",
                "description": "starting index(starting from 1)",
                "required": false,
                "default": 1,
                "schema": {
                  "type": "number"
                }
                
              },
              {
                "in": "query",
                "name": "per_page",
                "description": "max clients per page",
                "required": false,
                "default": 10,
                "schema": {
                  "type": "number"
                }
              },
              {
                "in": "query",
                "name": "filter_like",
                "description": "multifilter 'like' for all columns",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "column",
                "description": "'equal' filter column name(id, first_name, last_name, phone, email))",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "value",
                "description": "value of 'equal' filter column",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns clients in database in JSON format"
              }
            }
          }
        },
        "/users/{userid}": {
          "get": {
            "tags": ["Users"],
            "summary": "Get a single user by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "userid",
              "description": "id of user",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single user in database in JSON format"
              }
            }
          }
        },
        "/create_user": {
          "post": {
            "tags": ["Users"],
            "summary": "Create new user",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of user",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a user in database using JSON format"
              }
            }
          }
        },
        "/update_user": {
          "post": {
            "tags": ["Users"],
            "summary": "Update user by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of user",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/User"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a user in database using JSON format"
              }
            }
          }
        },
        "/delete_user/{userid}": {
          "delete": {
            "tags": ["Users"],
            "summary": "Delete user by id",
            "parameters": [
              {
              "in": "path",
              "name": "userid",
              "description": "id of user",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a user in database by id"
              }
            }
          }
        },
        "/clients": {
          "get": {
            "tags": ["Clients"],
            "summary": "Get clients in db",
            "parameters": [
              {
                "in": "query",
                "name": "index",
                "description": "starting index(starting from 1)",
                "required": false,
                "default": 1,
                "schema": {
                  "type": "number"
                }
                
              },
              {
                "in": "query",
                "name": "per_page",
                "description": "max clients per page",
                "required": false,
                "default": 10,
                "schema": {
                  "type": "number"
                }
              },
              {
                "in": "query",
                "name": "filter_like",
                "description": "multifilter 'like' for all columns",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "column",
                "description": "'equal' filter column name(id, full_name, phone, email, user_id))",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              },
              {
                "in": "query",
                "name": "value",
                "description": "value of 'equal' filter column",
                "required": false,
                "default": "",
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns clients in database in JSON format"
              }
            }
          }
        },
        "/clients/{clientid}": {
          "get": {
            "tags": ["Clients"],
            "summary": "Get a single client by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "clientid",
              "description": "client id",
              "required": true,
              "schema": {
                "type": "integer"
              }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns client in database in JSON format"
              }
            }
          }
        },
        "/create_client": {
          "post": {
            "tags": ["Clients"],
            "summary": "Create new client",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of client",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Client"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a client in database using JSON format"
              }
            }
          }
        },
        "/update_client": {
          "post": {
            "tags": ["Clients"],
            "summary": "Update client by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of client",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Client"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update a client in database using JSON format"
              }
            }
          }
        },
        "/delete_client/{clientid}": {
          "delete": {
            "tags": ["Clients"],
            "summary": "Delete client by id",
            "parameters": [
              {
              "in": "path",
              "name": "clientid",
              "description": "id of client",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a client in database by id"
              }
            }
          }
        },
        "/add_client_order": {
          "post": {
            "tags": ["Clients"],
            "summary": "Add order to client",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of client order",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ClientOrder"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Add order to client in database using JSON format"
              }
            }
          }
        },
        "/sign_up": {
          "post": {
            "tags": ["Authintication"],
            "summary": "Register new user",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of user",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Register a user in database using JSON format"
              }
            }
          }
        },
        "/sign_in": {
          "post": {
            "tags": ["Authintication"],
            "summary": "Sign in as user",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of email and password",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Login"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Sign in as user using email and password in JSON format"
              }
            }
          }
        },
        "/sign_out": {
          "get": {
            "tags": ["Authintication"],
            "summary": "Sign out",
            "responses": {
              "200": {
                "description": "Destroyes user session"
              }
            }
          }
        },
        "/session_user": {
          "get": {
            "tags": ["Authintication"],
            "summary": "Get current session user details",
            "responses": {
              "200": {
                "description": "Returns details of current session user in JSON format"
              }
            }
          }
        },
         "/appoint": {
          "get": {
            "tags": ["Appointments"],
            "summary": "Get Appointments in db",
            "parameters": [
              {
              "in": "query",
              "name": "column",
              "description": "filter column name(id, procedure_id, reservation_date, client_id, total_price, reserved_on, saloon_id))",
              "required": false,
              "schema": {
                "type": "string"
              }
              },
              {
              "in": "query",
              "name": "value",
              "description": "value of filter column",
              "required": false,
              "schema": {
                "type": "string"
              }
              },
              {
                "in": "query",
                "name": "details",
                "description": "get details boolean",
                "required": false,
                "type": "boolean",
                "default": false
              }
            ],
            "responses": {
              "200": {
                "description": "Returns Appointments in database in JSON format"
              }
            }
          }
        },
        "/appoint/{appointid}": {
          "get": {
            "tags": ["Appointments"],
            "summary": "Get a single appointment by id in db",
            "parameters": [
              {
              "in": "path",
              "name": "appointid",
              "description": "id of appointment",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Returns a single appointment in database in JSON format"
              }
            }
          }
        },
        "/create_appoint": {
          "post": {
            "tags": ["Appointments"],
            "summary": "Create new appointment",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of appointment",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Appointment"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create an user in appointment using JSON format"
              }
            }
          }
        },
        "/update_appoint": {
          "post": {
            "tags": ["Appointments"],
            "summary": "Update appointment by id",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of appointment",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "$ref": "#/definitions/Appointment"
                  }
                ]
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Update an appointment in database using JSON format"
              }
            }
          }
        },
        "/delete_appoint/{appointid}": {
          "delete": {
            "tags": ["Appointments"],
            "summary": "Delete appointment by id",
            "parameters": [
              {
              "in": "path",
              "name": "appointid",
              "description": "id of appointment",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete an appointment in database by id"
              }
            }
          }
        },
        "/schedule": {
          "get": {
            "tags": ["Schedule"],
            "summary": "Get Schedules in db",
            "parameters": [
              {
                "in": "query",
                "name": "index",
                "description": "starting index(starting from 1)",
                "required": false,
                "default": 1,
                "schema": {
                  "type": "number"
                }
                
              },
              {
                "in": "query",
                "name": "per_page",
                "description": "max clients per page",
                "required": false,
                "default": 10,
                "schema": {
                  "type": "number"
                }
              },
              {
              "in": "query",
              "name": "work_date",
              "description": "work day to fetch schedule",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date-time"
              }
              },
              {
              "in": "query",
              "name": "saloon_id",
              "description": "saloon id to fetch schedule",
              "required": false,
              "schema": {
                "type": "number"
              }
              }
            ],
            "responses": {
              "200": {
                "description": "Returns Schedules in database in JSON format"
              }
            }
          }
        },
        "/create_schedule": {
          "post": {
            "tags": ["Schedule"],
            "summary": "Create new schedule",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of schedule",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Schedule"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Create a schedule using JSON format"
              }
            }
          }
        },
        "/schedule_lunch": {
          "post":{
            "tags": ["Schedule"],
            "summary": "add a lunch time for a schedule",
            "parameters": [
              {
              "in": "body",
              "name": "body",
              "description": "object of schedule",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "employee_id": {
                    "type": "integer"
                  },
                  "lunch_time": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
            ],
            "responses": {
              "200": {
                "description": "add a lunch time for a schedule"
              }
            }
          }
        },
        "/delete_schedule/{scheduleid}": {
          "delete": {
            "tags": ["Schedule"],
            "summary": "Delete schedule by id",
            "parameters": [
              {
              "in": "path",
              "name": "scheduleid",
              "description": "id of schedule",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
            ],
            "responses": {
              "200": {
                "description": "Delete a schedule in database by id"
              }
            }
          }
        }
      },

    "definitions": {
      "Procedure": {
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "price_gbp": {
            "type": "number"
          },
          "duration": {
            "type": "integer"
          },
          "additional": {
            "type": "integer"
          },
          "saloon_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "uniqueItems": true
            },
            "default": [1]
          }
        }
      },
      "Package": {
        "properties": {
          "name": {
            "type": "string"
          },
          "procedure_id": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "Certificate": {
        "properties": {
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "Coupon": {
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "procedure_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "uniqueItems": true
            }
          },
          "discount": {
            "type": "number"
          },
          "expiry_date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Code": {
        "properties": {
          "email": {
            "type": "string"
          },
          "promocode": {
            "type": "string"
          }
        }
      },
      "Source": {
        "properties": {
          "source": {
            "type": "string"
          }
        }
      },
      "User": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "rights": {
            "type": "string",
            "default": "client"
          }
        }
      },
      "Login": {
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Client": {
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "phone": {
            "type": "string",
            "required": false
          },
          "email": {
            "type": "string",
            "required": false
          },
          "user_id": {
            "type": "number",
            "default": null,
            "required": false
          }
        }
      },
      "ClientOrder": {
        "properties": {
          "client_id": {
            "type": "integer",
            "required": true
          },
          "email": {
            "type": "string"
          },
          "package_id": {
            "type": "integer",
            "default": null
          },
          "certificate_id": {
            "type": "number",
            "default": null
          }
        }
      },
      "Appointment": {
        "properties": {
          "procedure_id": {
            "type": "integer",
            "default": "1"
          },
          "additional_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "default": 7,
              "uniqueItems": true
            }
          },
          "reservation_date_time": {
            "type": "string",
            "format": "date-time"
          },
          "client_id": {
            "type": "integer"
          },
          "saloon_id": {
            "type": "int",
            "default": "1"
          }
        }
      },
      "Schedule": {
        "properties": {
          "employee_id": {
            "type": "integer"
          },
          "work_date_start": {
            "type": "string",
            "format": "date-time"
          },
          "work_date_end": {
            "type": "string",
            "format": "date-time"
          },
          "saloon_id": {
            "type": "integer",
            "default": "1"
          }
        }
      }
    }
  }
